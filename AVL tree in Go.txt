package main
 
import "fmt"
 
type AVL struct {
	value int 
	 height int 
	 left *AVL 
	 right *AVL 
}
 
 
func (t *AVL) Search(value int) bool {
	if t == nil {
		return false
	}
	compare := value - t.value
	if compare < 0 {
		return t.left.Search(value)
	}else if compare > 0 {
		return t.right.Search(value)
	}else {
		return true
	}
}
 
 
 
 func (t *AVL) leftRotate() *AVL {//rotate left
	headNode := t.right
	t.right = headNode.left
	headNode.left = t
         
    t.height = max(t.left.getHeight(),t.right.getHeight()) + 1
    headNode.height = max(headNode.left.getHeight(),headNode.right.getHeight()) + 1
    return headNode
}
 
 func (t *AVL) rightRotate() *AVL {//rotate right
	headNode := t.left
	t.left = headNode.right
	headNode.right = t
	 
	t.height = max(t.left.getHeight(),t.right.getHeight()) +1
	headNode.height = max(headNode.left.getHeight(),headNode.right.getHeight()) + 1
	return headNode
}
 
 func (t *AVL) rightThenLeftRotate() *AVL {
	sonHeadNode := t.right.rightRotate()
	t.right = sonHeadNode
	 
	return t.leftRotate()
}
 
 func (t *AVL) LeftThenRightRotate() *AVL {//rotate left, then rotate right
	
	sonHeadNode := t.left.leftRotate()
	t.left = sonHeadNode
	
	return t.rightRotate()
}
 
func (t *AVL) adjust() *AVL {
	if t.right.getHeight() - t.left.getHeight() == 2 {
		if t.right.right.getHeight() > t.right.left.getHeight() {
			t = t.leftRotate()
		}else {
			t = t.rightThenLeftRotate()
		}
	}else if t.left.getHeight() - t.right.getHeight() == 2 {
		if t.left.left.getHeight() > t.left.right.getHeight() {
			t = t.rightRotate()
		} else {
			t = t.LeftThenRightRotate()
		}
	}
	return t
}
 

func (t *AVL) Insert(value int) *AVL {
	if t == nil {
		newNode := AVL{value,1,nil,nil}
		return &newNode
	}
	if value < t.value {
		t.left = t.left.Insert(value)
		t = t.adjust()
	}else if value > t.value{
		t.right = t.right.Insert(value)
		t = t.adjust()
	}else {
		fmt.Println("the node exit")
	}
	t.height = max(t.left.getHeight(),t.right.getHeight()) + 1
	return t
}
 
 

func (t *AVL) Delete(value int) *AVL {
	if t ==nil {
		return t
	}
	compare := value - t.value
	if compare < 0 {
		t.left = t.left.Delete(value)
	}else if compare > 0{
		t.right = t.right.Delete(value)
	 }else {//Find node, delete node()
		if t.left != nil && t.right != nil {
			t.value = t.right.getMin()
			t.right = t.right.Delete(t.value)
		} else if t.left !=nil {
			t = t.left
		 }else {//There is only one right child or no child
			t = t.right
		}
	}
	if t != nil {
		t.height = max(t.left.getHeight(),t.right.getHeight()) + 1
		t = t.adjust()
	}
	return t
}
 
 
func (t *AVL) getAll() []int {
	values := []int{}
	return addValues(values,t)
}
 
 
func addValues(values []int,t *AVL) []int {
	if t != nil {
		values = addValues(values,t.left)
		values = append(values,t.value)
		fmt.Println(t.value,t.height)
		values = addValues(values,t.right)
	}
	return values
}
 
 
func (t *AVL) getMin() int {
	if t == nil {
		return -1
	}
	if t.left == nil {
		return t.value
	} else {
		return t.left.getMin()
	}
}
 
 
func (t *AVL) getMax() int {
	if t == nil {
		return -1
	}
	if t.right == nil {
		return t.value
	} else {
		return t.right.getMax()
	}
}
 
 
func (t *AVL) getMinNode() *AVL {
	if t == nil {
		return nil
	}else {
		for t.left != nil {
			t = t.left
		}
	}
	return t
}
 
 
func (t *AVL) getMaxNode() *AVL {
	if t == nil {
		return nil
	}else {
		for t.right != nil {
			t = t.right
		}
	}
	return t
}
 
 
func (t *AVL) getHeight() int {
	if t == nil {
		return 0
	}
	return t.height
}
 
func max(a int,b int) int{
	if a > b {
		return a
	}else {
		return b
	}
}
 
 
func main() {
	bsTree := AVL{100,1,nil,nil}
	newTree := bsTree.Insert(60)
	newTree = bsTree.Insert(120)
	newTree = bsTree.Insert(110)
	newTree = bsTree.Insert(130)
	newTree = bsTree.Insert(105)
	fmt.Println(newTree.getAll())
 
	newTree.Delete(110)
	fmt.Println(newTree.getAll())
 
}
 
OUTPUT:-
 
60 1
100 2
105 1
110 3
120 2
130 1
[60 100 105 110 120 130]
60 1
100 2
105 1
120 3
130 1
[60 100 105 120 130]

